#!/bin/sh

# Provide required directories and environment files for project
# Only runs if the git repo is not found at `~/GITLAB_REPO_NAME`

# Check if git repo exists
git ls-remote GITLAB_REPO_NAME -q >/dev/null 2>&1 && exit 0

# I don't know why, but putting this line
# before this causes the `ssh` call from gitlab-ci to
# have a non-zero exit code.
set -e
printf "\nâ–¸ Bootstrapping project\n"
source ~/.lhd-env
git clone https://$DEPLOY_USERNAME:$DEPLOY_TOKEN@gitlab.com/GITLAB_USER/GITLAB_REPO_NAME.git
cd GITLAB_REPO_NAME
git checkout $1

# Create postgres mount point
mkdir ~/data

# Ensure cert path that traefik uses is available
CERT_FILE_PATH=${CERT_FILE_PATH:-/etc/certs/cloudflare.cert}
KEY_FILE_PATH=${KEY_FILE_PATH:-/etc/certs/cloudflare.key}

if [ ! -f "$CERT_FILE_PATH" ]; then
  echo "Error: $CERT_FILE_PATH (CERT_FILE_PATH) does not exist"
  exit 1
fi

if [ ! -f "$KEY_FILE_PATH" ]; then
  echo "Error: $KEY_FILE_PATH (KEY_FILE_PATH) does not exist"
  exit 1
fi

# append these to the special `.lhd-env` file
ADMIN_PASSWORD=$(openssl rand -base64 32)
cat << EOF >> ~/.lhd-env

# Automatically generated secrets / passwords
export POSTGRES_USER='postgres_admin_PROJECT_NAME'
export POSTGRES_PASSWORD='$(openssl rand -hex 32)'
export HASURA_GRAPHQL_ADMIN_SECRET='$(openssl rand -base64 32)'
export POSTGRES_DB='PROJECT_NAME_production'
export SECRET_KEY_BASE='$(openssl rand -base64 32)'
export ADMIN_USER='PROJECT_NAME_admin'
export ADMIN_PASSWORD='$ADMIN_PASSWORD'
export HASHED_PASSWORD='$(openssl passwd -apr1 $ADMIN_PASSWORD)'
EOF

# Log in
echo "$DEPLOY_TOKEN" | docker login registry.gitlab.com -u $DEPLOY_USERNAME --password-stdin

# start docker swarm
if [ -z "$IP_ADDRESS" ]; then
  echo '$IP_ADDRESS is empty. Cannot start swarm without knowing the IP_ADDRESS'
  exit 1
fi
docker swarm init --advertise-addr $IP_ADDRESS