#!/bin/bash

# Usage: script/deploy -s <arg>
#    -s means subtractive deploy mode. Determines order of `update_code` and `migrate`.
#    arg is either `production` or `staging` to determine which branch to checkout.
# 
# This should be run on the box where `docker stack` is to be called.

# Exit if any subcommand fails
set -e
set -o pipefail

# Source lhd env variables
source ~/.lhd-env

# import functions
source "${BASH_SOURCE%/*}/functions/commons"
source "${BASH_SOURCE%/*}/functions/update_code"
source "${BASH_SOURCE%/*}/functions/migrate"
source "${BASH_SOURCE%/*}/functions/docker_tag_exists"

# Support -s flag for making a 'subtractive' deployment
TYPE='add'
while getopts 's' flag; do
  case "${flag}" in
    s) TYPE='subtract' ;;
  esac
done
shift $((OPTIND-1))

DEPLOY_VERSION=$1

if [[ -z "$DEPLOY_VERSION" ]]; then
  echo "Error: Must provide version argument" 1>&2
  exit 1
fi

MAX_COMMITS=10
IMAGE='registry.gitlab.com/kcerb/foo_bar/lucky'

# Update commit to match deploy
git checkout $DEPLOY_VERSION

# Search for Image tag to match this version
# (tag is same unless build was skipped )
LUCKY_TAG=DEPLOY_VERSION

# Determine latest build if no build arg was passed / no build can be found matching that
if ! docker_tag_exists "$IMAGE" "$LUCKY_TAG" ; then
  printf "\n▸ Searching for most recent build using *experimental* Docker feature.\n"
  for LUCKY_TAG in $(git --no-pager log --abbrev=8 --pretty=format:"%h" -n $MAX_COMMITS) ; do
    docker_tag_exists "$IMAGE" "$LUCKY_TAG" && break
  done
  
  if [ $? != 0 ]; then
    printf "✗ Failed to find build matching one of last $MAX_COMMITS commits.\n"
    exit 1
  fi
fi
export LUCKY_TAG

# additive migrations add to the db, so the new code relies on new stuff in the db
# and that means we have to update the db first.
# subtractive migrations take away from the db, which breaks the old code
# thus we deploy code first.
if [ "$TYPE" = "add" ]; then
  migrate
  update_code
else
  update_code
  migrate
fi

printf "\n▸ Pruning docker\n"
docker system prune -af | indent

printf "\n✔ All done.\n"
