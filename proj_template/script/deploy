#!/bin/bash

# Usage: script/deploy -s <arg>
#    -s means subtractive deploy mode. Determines order of `update_code` and `migrate`.
#    arg is either `production` or `staging` to determine which branch to checkout.
# 
# This should be run on the box where `docker stack` is to be called.

# Exit if any subcommand fails
set -e
set -o pipefail

# import functions
source "${BASH_SOURCE%/*}/functions/commons"
source "${BASH_SOURCE%/*}/functions/update_code"
source "${BASH_SOURCE%/*}/functions/migrate"
source "${BASH_SOURCE%/*}/functions/bootstrap"

# Support -s flag for making a 'subtractive' deployment
TYPE='add'
while getopts 's' flag; do
  case "${flag}" in
    s) TYPE='subtract' ;;
  esac
done
shift $((OPTIND-1))

# If this is first deploy we need to bootstrap the project
git ls-remote GITLAB_REPO_NAME -q >/dev/null 2>&1 || bootstrap $1

cd GITLAB_REPO_NAME
if [ $1 = 'staging' ]; then
  git checkout staging
fi
git pull
export LUCKY_TAG=`git rev-parse --abbrev-ref HEAD` # use branch name

# Source lhd env variables
source ~/.lhd-env

# additive migrations add to the db, so the new code relies on new stuff in the db
# and that means we have to update the db first.
# subtractive migrations take away from the db, which breaks the old code
# thus we deploy code first.
if [ "$TYPE" = "add" ]; then
  migrate
  update_code
else
  update_code
  migrate
fi

printf "\n▸Pruning docker\n"
docker system prune -af | indent

printf "\n✔ All done.\n"
