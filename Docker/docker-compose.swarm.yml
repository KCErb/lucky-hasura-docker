# 
version: '3.6'
services:
  postgres:
    networks:
      - migrations
    deploy:
      placement:
        constraints: [node.role == manager]
  hasura:
    deploy:
      labels:
        - traefik.enable=true
        - traefik.port=8080
        - traefik.docker.network=SWARM_NAME_internal
        - traefik.frontend.rule=Host:api.${APP_DOMAIN};Path:/v1/graphql
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "/script/docker/hasura_healthcheck"]
  lucky:
    networks:
    - migrations
    deploy:
      labels:
        - traefik.enable=true
        - traefik.port=5000
        - traefik.docker.network=SWARM_NAME_internal
        - traefik.frontend.rule=Host:api.${APP_DOMAIN}
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "/data/script/docker/lucky_healthcheck"]
  traefik:
    image: traefik
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    depends_on:
    - traefik-docker-link
    volumes:
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml
      # HTTPS_SWITCH
      - /etc/certs/:/certs/
    deploy:
      labels:
      - traefik.enable=true
      - traefik.port=8080
      - traefik.frontend.rule=Host:traefik.${APP_DOMAIN}
      placement:
        constraints: [node.role == manager]
    networks:
    - docker-socket
    - internal
  traefik-docker-link:
    image: tecnativa/docker-socket-proxy
    networks:
    - docker-socket
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
    environment:
      CONTAINERS: 1
      NETWORKS: 1
      SERVICES: 1
      SWARM: 1
      TASKS: 1
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
networks:
  docker-socket:
  migrations:
    driver: overlay
    attachable: true