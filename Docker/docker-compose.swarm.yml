version: '3.6'
services:
  postgres:
    networks:
      - migrations
    deploy:
      placement:
        constraints: [node.role == manager]
  hasura:
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.services.hasura-service.loadbalancer.server.port=8080
        - traefik.http.routers.hasura.rule=(Host(`api.${APP_DOMAIN}`) && Path(`/v1/graphql`))
        - traefik.http.routers.hasura.entrypoints=websecure
        - traefik.http.routers.hasura.tls=true
        - traefik.docker.lbswarm=true
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "/script/docker/hasura_healthcheck"]
  lucky:
    networks:
    - migrations
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.services.lucky-service.loadbalancer.server.port=5000
        - traefik.http.routers.lucky.rule=Host(`api.${APP_DOMAIN}`)
        - traefik.http.routers.lucky.entrypoints=websecure
        - traefik.http.routers.lucky.tls=true
        - traefik.docker.lbswarm=true
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "/data/script/docker/lucky_healthcheck"]
  traefik:
    image: traefik:v2.2.1
    ports:
      - 80:80
      - 443:443
    environment:
      ADMIN_USER:
      HASHED_PASSWORD:
    depends_on:
    - traefik-docker-link
    volumes:
      - ./traefik:/etc/traefik
      - /etc/certs/:/certs/
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
      - "traefik.enable=true"
      - traefik.http.services.api-service.loadbalancer.server.port=8080
      - "traefik.http.routers.api.rule=Host(`traefik.${APP_DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=traefik-auth@file"
      - "traefik.http.routers.api.tls"
    networks:
    - docker_socket
    - internal
  traefik-docker-link:
    image: tecnativa/docker-socket-proxy
    networks:
    - docker_socket
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]
    environment:
      CONTAINERS: 1
      NETWORKS: 1
      SERVICES: 1
      SWARM: 1
      TASKS: 1
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
networks:
  docker_socket:
  migrations:
    driver: overlay
    attachable: true