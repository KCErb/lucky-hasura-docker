#!/bin/bash
# Run on the box where `docker stack` is called.
# Build step built a lucky image which will be deployed.
# That image has the latest code compiled, hence 'update_code'.

# As for hasura, we are just mounting the volumes in that box, same
# as in dev. So the metadata.yml

# Exit if any subcommand fails
set -e
set -o pipefail

source "${BASH_SOURCE%/*}/functions/commons"
source "${BASH_SOURCE%/*}/functions/update_code"
source "${BASH_SOURCE%/*}/functions/migrate"

# deploy tools read from env, so if we are not in production
# we can provide some default values for dev purposes.
if [ "$LUCKY_ENV" != "production" ]; then
  export POSTGRES_PASSWORD=secret
  export POSTGRES_USER=admin
  export POSTGRES_DB=project_local_prod
  export HASURA_GRAPHQL_ADMIN_SECRET=secret
  export SECRET_KEY_BASE=secret
  export SEND_GRID_KEY=fake_key
  export APP_DOMAIN=localhost
  export LUCKY_ENV=production
fi

# Support -s flag for making a 'subtractive' deployment
TYPE='add'
while getopts 's' flag; do
  case "${flag}" in
    s) TYPE='subtract' ;;
  esac
done

ARG=$@
TYPE="${ARG:-add}"
export LUCKY_TAG=`git rev-parse --short=8 HEAD`

# additive migrations add to the db, so the new code relies on new stuff in the db
# and that means we have to update the db first.
# subtractive migrations take away from the db, which breaks the old code
# thus we deploy code first.
if [ "$TYPE" = "add" ]; then
  migrate
  update_code
else
  update_code
  migrate
fi

printf "\n▸ Running hasura-cli metadata apply\n"
docker exec -td PROJECT_NAME_hasura /bin/hasura-cli metadata apply

printf "\n✔ All done.\n"
