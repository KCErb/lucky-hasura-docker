
# Inspired by and based on the config mentioned here
# https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/
image: docker/compose:1.25.5

stages:
  - test
  - build
  - push
  - deploy

variables:
  REGISTRY_IMAGE: registry.gitlab.com/GITLAB_USER/GITLAB_REPO_NAME/lucky
  POSTGRES_HOST_AUTH_METHOD: trust

services:
  - docker:dind # docker-in-docker, makes `docker` and `docker-compose` commands available
  - postgres

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

Test:
  stage: test
  script:
    - script/test -t

Build:
  stage: build
  script:
    # fetches the latest image on the branch, does not fail if not found
    - docker pull $REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
    - script/build
    - docker push $REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

# The goal here is to tag builds by branch so that in the build step we can use previous work
Push tag:
  variables:
    # We do not need the source code here. Just playing with Docker.
    GIT_STRATEGY: none
  stage: push
  script:
    - docker pull $REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

Deploy staging:
  stage: deploy
  only:
    - staging
  script:
    - apk add --update openssh
    - eval $(ssh-agent -s)
    - echo "$GITLAB_STAGING_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $STAGING_SERVER_IP >> ~/.ssh/known_hosts
    - ssh -t root@"$STAGING_SERVER_IP" "bash --login -c 'cd GITLAB_REPO && git pull && script/deploy && docker system prune -af'"

Deploy production:
  stage: deploy
  only:
    - master
  script:
    - apk add --update openssh
    - eval $(ssh-agent -s)
    - echo "$GITLAB_PRODUCTION_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PRODUCTION_SERVER_IP >> ~/.ssh/known_hosts
    - ssh -t root@"$PRODUCTION_SERVER_IP" "bash --login -c 'cd GITLAB_REPO && git pull && script/deploy && docker system prune -af'"
